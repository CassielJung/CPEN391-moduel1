
step5_optionF.elf:     file format elf32-littlenios2
step5_optionF.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020188

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000007a0 memsz 0x000007a0 flags r-x
    LOAD off    0x000017c0 vaddr 0x000207c0 paddr 0x00020958 align 2**12
         filesz 0x00000198 memsz 0x00000198 flags rw-
    LOAD off    0x00001af0 vaddr 0x00020af0 paddr 0x00020af0 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000168  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000638  00020188  00020188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000207c0  00020af0  00001958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000198  000207c0  00020958  000017c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00020af0  00020af0  00001af0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00020c10  00020c10  00001958  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000258  00000000  00000000  00001988  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007d5b  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d4c  00000000  00000000  0000993b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001e7d  00000000  00000000  0000b687  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002bc  00000000  00000000  0000d504  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001253  00000000  00000000  0000d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d01  00000000  00000000  0000ea13  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0000f714  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  0000f748  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00010a34  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00010a37  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00010a46  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00010a47  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00010a48  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00010a51  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00010a5a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000005  00000000  00000000  00010a63  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000031  00000000  00000000  00010a68  2**0
                  CONTENTS, READONLY
 26 .jdi          00004f15  00000000  00000000  00010a99  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020188 l    d  .text	00000000 .text
000207c0 l    d  .rodata	00000000 .rodata
000207c0 l    d  .rwdata	00000000 .rwdata
00020af0 l    d  .bss	00000000 .bss
00020c10 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/UBC/CPEN391/Module1/module-1-CassielJung/step5/software/step5_optionF_bsp/obj/HAL/src/crt0.o
000201d0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00020b0c g     O .bss	00000004 alt_instruction_exception_handler
000206e4 g     F .text	0000002c alt_main
00020b10 g     O .bss	00000100 alt_irq
00020958 g       *ABS*	00000000 __flash_rwdata_start
00020954 g     O .rwdata	00000004 jtag_uart
00020780 g     F .text	00000008 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00020b04 g     O .bss	00000004 alt_argv
00028950 g       *ABS*	00000000 _gp
00020758 g     F .text	00000028 alt_exception_cause_generated_bad_addr
0002047c g     F .text	00000064 .hidden __udivsi3
00020788 g     F .text	00000038 alt_icache_flush
00020c10 g       *ABS*	00000000 __bss_end
000205c8 g     F .text	00000068 alt_iic_isr_register
000205b0 g     F .text	00000018 alt_ic_irq_enabled
00020afc g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	00000060 alt_irq_handler
00020734 g     F .text	00000018 alt_dcache_flush_all
00020958 g       *ABS*	00000000 __ram_rwdata_end
00020af0 g     O .bss	00000004 direction
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory
000207c0 g       *ABS*	00000000 __ram_rodata_end
000204e0 g     F .text	0000005c .hidden __umodsi3
00020c10 g       *ABS*	00000000 end
0002015c g     F .exceptions	0000002c alt_instruction_exception_entry
0003f400 g       *ABS*	00000000 __alt_stack_pointer
00020188 g     F .text	0000004c _start
00020730 g     F .text	00000004 alt_sys_init
000207c0 g       *ABS*	00000000 __ram_rwdata_start
000207c0 g       *ABS*	00000000 __ram_rodata_start
00020c10 g       *ABS*	00000000 __alt_stack_base
00020af4 g     O .bss	00000004 counter
00020af0 g       *ABS*	00000000 __bss_start
0002032c g     F .text	00000058 main
00020b00 g     O .bss	00000004 alt_envp
00020384 g     F .text	00000080 .hidden __divsi3
000207c0 g       *ABS*	00000000 __flash_rodata_start
00020710 g     F .text	00000020 alt_irq_init
00020b08 g     O .bss	00000004 alt_argc
00020020 g       .exceptions	00000000 alt_irq_entry
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002053c g     F .text	00000004 alt_ic_isr_register
00020958 g       *ABS*	00000000 _edata
00020c10 g       *ABS*	00000000 _end
00020284 g     F .text	000000a8 computePrime
00020188 g       *ABS*	00000000 __ram_exceptions_end
00020af8 g     O .bss	00000004 brightness
00020578 g     F .text	00000038 alt_ic_irq_disable
00020404 g     F .text	00000078 .hidden __modsi3
0003f400 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002001c g       .entry	00000000 _exit
000201d4 g     F .text	000000b0 timer_ISR
0002074c g     F .text	0000000c alt_icache_flush_all
00020950 g     O .rwdata	00000004 alt_priority_mask
00020540 g     F .text	00000038 alt_ic_irq_enable
00020630 g     F .text	000000b4 alt_load
000207c0 g     O .rwdata	00000190 ledPattern



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08406214 	ori	at,at,392
    jmp r1
   20018:	0800683a 	jmp	at

0002001c <_exit>:
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	002015c0 	call	2015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defffe04 	addi	sp,sp,-8
   20100:	dfc00115 	stw	ra,4(sp)
   20104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2010c:	040000b4 	movhi	r16,2
   20110:	8402c404 	addi	r16,r16,2832
    i = 0;
   20114:	0005883a 	mov	r2,zero
    mask = 1;
   20118:	00c00044 	movi	r3,1
      if (active & mask)
   2011c:	20ca703a 	and	r5,r4,r3
   20120:	28000b26 	beq	r5,zero,20150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
   20124:	100490fa 	slli	r2,r2,3
   20128:	8085883a 	add	r2,r16,r2
   2012c:	10c00017 	ldw	r3,0(r2)
   20130:	11000117 	ldw	r4,4(r2)
   20134:	183ee83a 	callr	r3
   20138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   2013c:	203ff51e 	bne	r4,zero,20114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   20140:	dfc00117 	ldw	ra,4(sp)
   20144:	dc000017 	ldw	r16,0(sp)
   20148:	dec00204 	addi	sp,sp,8
   2014c:	f800283a 	ret
      mask <<= 1;
   20150:	1806907a 	slli	r3,r3,1
      i++;
   20154:	10800044 	addi	r2,r2,1
      if (active & mask)
   20158:	003ff006 	br	2011c <alt_irq_handler+0x20>

0002015c <alt_instruction_exception_entry>:
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   2015c:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   20160:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20164:	d0e06f17 	ldw	r3,-32324(gp)
   20168:	18000426 	beq	r3,zero,2017c <alt_instruction_exception_entry+0x20>
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   2016c:	1004d0ba 	srli	r2,r2,2
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20170:	200b883a 	mov	r5,r4
   20174:	110007cc 	andi	r4,r2,31
   20178:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   2017c:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   20180:	0005883a 	mov	r2,zero
   20184:	f800283a 	ret

Disassembly of section .text:

00020188 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20188:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   2018c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20190:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20194:	00bffd16 	blt	zero,r2,2018c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20198:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   2019c:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
   201a0:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   201a4:	d6a25414 	ori	gp,gp,35152
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201a8:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   201ac:	1082bc14 	ori	r2,r2,2800

    movhi r3, %hi(__bss_end)
   201b0:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   201b4:	18c30414 	ori	r3,r3,3088

    beq r2, r3, 1f
   201b8:	10c00326 	beq	r2,r3,201c8 <_start+0x40>

0:
    stw zero, (r2)
   201bc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201c0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201c4:	10fffd36 	bltu	r2,r3,201bc <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201c8:	00206300 	call	20630 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201cc:	00206e40 	call	206e4 <alt_main>

000201d0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201d0:	003fff06 	br	201d0 <alt_after_alt_main>

000201d4 <timer_ISR>:
void timer_ISR(void* context)
#else
void timer_ISR(void* context, alt_u32 id)
#endif
{
  if (ledPattern[brightness][counter]) {              // if ledPattern[][] == 1
   201d4:	d0a06a17 	ldw	r2,-32344(gp)
   201d8:	d0e06917 	ldw	r3,-32348(gp)
   201dc:	10800524 	muli	r2,r2,20
   201e0:	10c5883a 	add	r2,r2,r3
   201e4:	100490ba 	slli	r2,r2,2
   201e8:	00c000b4 	movhi	r3,2
   201ec:	10c7883a 	add	r3,r2,r3
   201f0:	1881f017 	ldw	r2,1984(r3)
   201f4:	10000b26 	beq	r2,zero,20224 <timer_ISR+0x50>
    IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0x3FF);    // light up all the LED
   201f8:	00c0ffc4 	movi	r3,1023
   201fc:	00800134 	movhi	r2,4
   20200:	10c40c35 	stwio	r3,4144(r2)
  } else {
    IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0x0);      // else turn off all the LED
  }

  counter++;
   20204:	d0a06917 	ldw	r2,-32348(gp)
   20208:	10800044 	addi	r2,r2,1

  if (counter == 20) {
   2020c:	10c00520 	cmpeqi	r3,r2,20
   20210:	1800071e 	bne	r3,zero,20230 <timer_ISR+0x5c>
  counter++;
   20214:	d0a06915 	stw	r2,-32348(gp)
    if (brightness < 0) {
      direction = 1; brightness++;
    }
  }

  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0); // reset timer
   20218:	00800134 	movhi	r2,4
   2021c:	10040035 	stwio	zero,4096(r2)
}
   20220:	f800283a 	ret
    IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0x0);      // else turn off all the LED
   20224:	00800134 	movhi	r2,4
   20228:	10040c35 	stwio	zero,4144(r2)
   2022c:	003ff506 	br	20204 <timer_ISR+0x30>
    if (direction) brightness++;
   20230:	d0e06817 	ldw	r3,-32352(gp)
    counter = 0;
   20234:	d0206915 	stw	zero,-32348(gp)
    if (direction) brightness++;
   20238:	d0a06a17 	ldw	r2,-32344(gp)
   2023c:	18000f26 	beq	r3,zero,2027c <timer_ISR+0xa8>
   20240:	10800044 	addi	r2,r2,1
    else brightness--;
   20244:	d0a06a15 	stw	r2,-32344(gp)
    if (brightness > 4) {
   20248:	d0a06a17 	ldw	r2,-32344(gp)
   2024c:	10c00150 	cmplti	r3,r2,5
   20250:	1800031e 	bne	r3,zero,20260 <timer_ISR+0x8c>
      direction = 0; brightness--;
   20254:	10bfffc4 	addi	r2,r2,-1
   20258:	d0206815 	stw	zero,-32352(gp)
   2025c:	d0a06a15 	stw	r2,-32344(gp)
    if (brightness < 0) {
   20260:	d0a06a17 	ldw	r2,-32344(gp)
   20264:	103fec0e 	bge	r2,zero,20218 <timer_ISR+0x44>
      direction = 1; brightness++;
   20268:	00c00044 	movi	r3,1
   2026c:	10800044 	addi	r2,r2,1
   20270:	d0e06815 	stw	r3,-32352(gp)
   20274:	d0a06a15 	stw	r2,-32344(gp)
   20278:	003fe706 	br	20218 <timer_ISR+0x44>
    else brightness--;
   2027c:	10bfffc4 	addi	r2,r2,-1
   20280:	003ff006 	br	20244 <timer_ISR+0x70>

00020284 <computePrime>:
void computePrime() {
   20284:	dee66c04 	addi	sp,sp,-26192
  primeList[0] = 2;
   20288:	00800084 	movi	r2,2
   2028c:	d8800015 	stw	r2,0(sp)
  primeList[1] = 3;
   20290:	008000c4 	movi	r2,3
void computePrime() {
   20294:	dc599015 	stw	r17,26176(sp)
   20298:	dc198f15 	stw	r16,26172(sp)
   2029c:	dfd99315 	stw	ra,26188(sp)
   202a0:	dcd99215 	stw	r19,26184(sp)
   202a4:	dc999115 	stw	r18,26180(sp)
  primeList[1] = 3;
   202a8:	d8800115 	stw	r2,4(sp)
  for (uint32_t i = 5; i < 0xFFFFFFFF; i=i+2) {
   202ac:	04000144 	movi	r16,5
  uint32_t numPrime = 2;
   202b0:	04400084 	movi	r17,2
   202b4:	d827883a 	mov	r19,sp
    for (uint32_t j = 0; j < numPrime; j++) {
   202b8:	0025883a 	mov	r18,zero
      if (i % primeList[j] == 0) { // if i is divisible by one of previous prime
   202bc:	99400017 	ldw	r5,0(r19)
   202c0:	8009883a 	mov	r4,r16
   202c4:	00204e00 	call	204e0 <__umodsi3>
   202c8:	10000e26 	beq	r2,zero,20304 <computePrime+0x80>
    for (uint32_t j = 0; j < numPrime; j++) {
   202cc:	94800044 	addi	r18,r18,1
   202d0:	9cc00104 	addi	r19,r19,4
   202d4:	947ff91e 	bne	r18,r17,202bc <computePrime+0x38>
      if (numPrime < 6543) {
   202d8:	888663d8 	cmpnei	r2,r17,6543
   202dc:	10000526 	beq	r2,zero,202f4 <computePrime+0x70>
        primeList[numPrime-1] = i; // save to primeList
   202e0:	880490ba 	slli	r2,r17,2
   202e4:	d8d98f04 	addi	r3,sp,26172
        numPrime++;                // increment numPrime
   202e8:	8c400044 	addi	r17,r17,1
        primeList[numPrime-1] = i; // save to primeList
   202ec:	1885883a 	add	r2,r3,r2
   202f0:	14267115 	stw	r16,-26172(r2)
      while(!(IORD_ALTERA_AVALON_PIO_DATA(PRIME_NUMBER_BASE) & 0x00000001));
   202f4:	00800037 	ldwio	r2,0(zero)
   202f8:	1080004c 	andi	r2,r2,1
   202fc:	103ffd26 	beq	r2,zero,202f4 <computePrime+0x70>
      IOWR_ALTERA_AVALON_PIO_DATA(PRIME_NUMBER_BASE, i);
   20300:	04000035 	stwio	r16,0(zero)
  for (uint32_t i = 5; i < 0xFFFFFFFF; i=i+2) {
   20304:	84000084 	addi	r16,r16,2
   20308:	80bfffe0 	cmpeqi	r2,r16,-1
   2030c:	103fe926 	beq	r2,zero,202b4 <computePrime+0x30>
}
   20310:	dfd99317 	ldw	ra,26188(sp)
   20314:	dcd99217 	ldw	r19,26184(sp)
   20318:	dc999117 	ldw	r18,26180(sp)
   2031c:	dc599017 	ldw	r17,26176(sp)
   20320:	dc198f17 	ldw	r16,26172(sp)
   20324:	ded99404 	addi	sp,sp,26192
   20328:	f800283a 	ret

0002032c <main>:

int main()
{
   2032c:	defffe04 	addi	sp,sp,-8
  // Variable Initialization
  brightness = 0; counter = 0; direction = 1;
   20330:	00800044 	movi	r2,1
   20334:	d0a06815 	stw	r2,-32352(gp)
{
   20338:	dfc00115 	stw	ra,4(sp)
  brightness = 0; counter = 0; direction = 1;
   2033c:	d0206a15 	stw	zero,-32344(gp)
   20340:	d0206915 	stw	zero,-32348(gp)

  /* Timer Initialization */
  // System clock: 50MHz = 50,000,000 clock cycle per second
  // 10ms = 0.01s = 0.5MHZ = 500,000(0x7A120) clock cycle
  IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0007); // set higher 16 bits of period
   20344:	008001c4 	movi	r2,7
   20348:	00c00134 	movhi	r3,4
   2034c:	18840335 	stwio	r2,4108(r3)
  IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0xA120); // set lower 16 bits of period
   20350:	01284814 	movui	r4,41248
   20354:	19040235 	stwio	r4,4104(r3)

  // Clear IRQ status
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   20358:	18040035 	stwio	zero,4096(r3)

  // enable interrupt
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
   2035c:	18840135 	stwio	r2,4100(r3)
                                                 | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
												                         | ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  // Register the ISR for timer event
  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ, timer_ISR, 0, 0x0);
   20360:	018000b4 	movhi	r6,2
   20364:	d8000015 	stw	zero,0(sp)
   20368:	000f883a 	mov	r7,zero
   2036c:	31807504 	addi	r6,r6,468
   20370:	000b883a 	mov	r5,zero
   20374:	0009883a 	mov	r4,zero
   20378:	002053c0 	call	2053c <alt_ic_isr_register>
  #endif


  /* Event loop never exits. */
  while (1) {
    computePrime();
   2037c:	00202840 	call	20284 <computePrime>
   20380:	003ffe06 	br	2037c <main+0x50>

00020384 <__divsi3>:
   20384:	20001a16 	blt	r4,zero,203f0 <__divsi3+0x6c>
   20388:	000f883a 	mov	r7,zero
   2038c:	2800020e 	bge	r5,zero,20398 <__divsi3+0x14>
   20390:	014bc83a 	sub	r5,zero,r5
   20394:	39c0005c 	xori	r7,r7,1
   20398:	200d883a 	mov	r6,r4
   2039c:	00c00044 	movi	r3,1
   203a0:	2900092e 	bgeu	r5,r4,203c8 <__divsi3+0x44>
   203a4:	00800804 	movi	r2,32
   203a8:	00c00044 	movi	r3,1
   203ac:	00000106 	br	203b4 <__divsi3+0x30>
   203b0:	10001226 	beq	r2,zero,203fc <__divsi3+0x78>
   203b4:	294b883a 	add	r5,r5,r5
   203b8:	10bfffc4 	addi	r2,r2,-1
   203bc:	18c7883a 	add	r3,r3,r3
   203c0:	293ffb36 	bltu	r5,r4,203b0 <__divsi3+0x2c>
   203c4:	18000d26 	beq	r3,zero,203fc <__divsi3+0x78>
   203c8:	0005883a 	mov	r2,zero
   203cc:	31400236 	bltu	r6,r5,203d8 <__divsi3+0x54>
   203d0:	314dc83a 	sub	r6,r6,r5
   203d4:	10c4b03a 	or	r2,r2,r3
   203d8:	1806d07a 	srli	r3,r3,1
   203dc:	280ad07a 	srli	r5,r5,1
   203e0:	183ffa1e 	bne	r3,zero,203cc <__divsi3+0x48>
   203e4:	38000126 	beq	r7,zero,203ec <__divsi3+0x68>
   203e8:	0085c83a 	sub	r2,zero,r2
   203ec:	f800283a 	ret
   203f0:	0109c83a 	sub	r4,zero,r4
   203f4:	01c00044 	movi	r7,1
   203f8:	003fe406 	br	2038c <__divsi3+0x8>
   203fc:	0005883a 	mov	r2,zero
   20400:	003ff806 	br	203e4 <__divsi3+0x60>

00020404 <__modsi3>:
   20404:	20001a16 	blt	r4,zero,20470 <__modsi3+0x6c>
   20408:	000f883a 	mov	r7,zero
   2040c:	2005883a 	mov	r2,r4
   20410:	2800010e 	bge	r5,zero,20418 <__modsi3+0x14>
   20414:	014bc83a 	sub	r5,zero,r5
   20418:	00c00044 	movi	r3,1
   2041c:	2900092e 	bgeu	r5,r4,20444 <__modsi3+0x40>
   20420:	01800804 	movi	r6,32
   20424:	00c00044 	movi	r3,1
   20428:	00000106 	br	20430 <__modsi3+0x2c>
   2042c:	30000d26 	beq	r6,zero,20464 <__modsi3+0x60>
   20430:	294b883a 	add	r5,r5,r5
   20434:	31bfffc4 	addi	r6,r6,-1
   20438:	18c7883a 	add	r3,r3,r3
   2043c:	293ffb36 	bltu	r5,r4,2042c <__modsi3+0x28>
   20440:	18000826 	beq	r3,zero,20464 <__modsi3+0x60>
   20444:	1806d07a 	srli	r3,r3,1
   20448:	11400136 	bltu	r2,r5,20450 <__modsi3+0x4c>
   2044c:	1145c83a 	sub	r2,r2,r5
   20450:	280ad07a 	srli	r5,r5,1
   20454:	183ffb1e 	bne	r3,zero,20444 <__modsi3+0x40>
   20458:	38000126 	beq	r7,zero,20460 <__modsi3+0x5c>
   2045c:	0085c83a 	sub	r2,zero,r2
   20460:	f800283a 	ret
   20464:	2005883a 	mov	r2,r4
   20468:	383ffd26 	beq	r7,zero,20460 <__modsi3+0x5c>
   2046c:	003ffb06 	br	2045c <__modsi3+0x58>
   20470:	0109c83a 	sub	r4,zero,r4
   20474:	01c00044 	movi	r7,1
   20478:	003fe406 	br	2040c <__modsi3+0x8>

0002047c <__udivsi3>:
   2047c:	200d883a 	mov	r6,r4
   20480:	2900152e 	bgeu	r5,r4,204d8 <__udivsi3+0x5c>
   20484:	28001416 	blt	r5,zero,204d8 <__udivsi3+0x5c>
   20488:	00800804 	movi	r2,32
   2048c:	00c00044 	movi	r3,1
   20490:	00000206 	br	2049c <__udivsi3+0x20>
   20494:	10000e26 	beq	r2,zero,204d0 <__udivsi3+0x54>
   20498:	28000516 	blt	r5,zero,204b0 <__udivsi3+0x34>
   2049c:	294b883a 	add	r5,r5,r5
   204a0:	10bfffc4 	addi	r2,r2,-1
   204a4:	18c7883a 	add	r3,r3,r3
   204a8:	293ffa36 	bltu	r5,r4,20494 <__udivsi3+0x18>
   204ac:	18000826 	beq	r3,zero,204d0 <__udivsi3+0x54>
   204b0:	0005883a 	mov	r2,zero
   204b4:	31400236 	bltu	r6,r5,204c0 <__udivsi3+0x44>
   204b8:	314dc83a 	sub	r6,r6,r5
   204bc:	10c4b03a 	or	r2,r2,r3
   204c0:	1806d07a 	srli	r3,r3,1
   204c4:	280ad07a 	srli	r5,r5,1
   204c8:	183ffa1e 	bne	r3,zero,204b4 <__udivsi3+0x38>
   204cc:	f800283a 	ret
   204d0:	0005883a 	mov	r2,zero
   204d4:	f800283a 	ret
   204d8:	00c00044 	movi	r3,1
   204dc:	003ff406 	br	204b0 <__udivsi3+0x34>

000204e0 <__umodsi3>:
   204e0:	2005883a 	mov	r2,r4
   204e4:	2900132e 	bgeu	r5,r4,20534 <__umodsi3+0x54>
   204e8:	28001216 	blt	r5,zero,20534 <__umodsi3+0x54>
   204ec:	01800804 	movi	r6,32
   204f0:	00c00044 	movi	r3,1
   204f4:	00000206 	br	20500 <__umodsi3+0x20>
   204f8:	30000c26 	beq	r6,zero,2052c <__umodsi3+0x4c>
   204fc:	28000516 	blt	r5,zero,20514 <__umodsi3+0x34>
   20500:	294b883a 	add	r5,r5,r5
   20504:	31bfffc4 	addi	r6,r6,-1
   20508:	18c7883a 	add	r3,r3,r3
   2050c:	293ffa36 	bltu	r5,r4,204f8 <__umodsi3+0x18>
   20510:	18000626 	beq	r3,zero,2052c <__umodsi3+0x4c>
   20514:	1806d07a 	srli	r3,r3,1
   20518:	11400136 	bltu	r2,r5,20520 <__umodsi3+0x40>
   2051c:	1145c83a 	sub	r2,r2,r5
   20520:	280ad07a 	srli	r5,r5,1
   20524:	183ffb1e 	bne	r3,zero,20514 <__umodsi3+0x34>
   20528:	f800283a 	ret
   2052c:	2005883a 	mov	r2,r4
   20530:	f800283a 	ret
   20534:	00c00044 	movi	r3,1
   20538:	003ff606 	br	20514 <__umodsi3+0x34>

0002053c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2053c:	00205c81 	jmpi	205c8 <alt_iic_isr_register>

00020540 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
   20540:	0009303a 	rdctl	r4,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20544:	00ffff84 	movi	r3,-2
   20548:	20c6703a 	and	r3,r4,r3
   2054c:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   20550:	00800044 	movi	r2,1
   20554:	d0e06b17 	ldw	r3,-32340(gp)
   20558:	1144983a 	sll	r2,r2,r5
   2055c:	10c4b03a 	or	r2,r2,r3
   20560:	d0a06b15 	stw	r2,-32340(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20564:	d0a06b17 	ldw	r2,-32340(gp)
   20568:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
   2056c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   20570:	0005883a 	mov	r2,zero
   20574:	f800283a 	ret

00020578 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
   20578:	0009303a 	rdctl	r4,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2057c:	00ffff84 	movi	r3,-2
   20580:	20c6703a 	and	r3,r4,r3
   20584:	1801703a 	wrctl	status,r3
  alt_irq_active &= ~(1 << id);
   20588:	00bfff84 	movi	r2,-2
   2058c:	d0e06b17 	ldw	r3,-32340(gp)
   20590:	1144183a 	rol	r2,r2,r5
   20594:	10c4703a 	and	r2,r2,r3
   20598:	d0a06b15 	stw	r2,-32340(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2059c:	d0a06b17 	ldw	r2,-32340(gp)
   205a0:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
   205a4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   205a8:	0005883a 	mov	r2,zero
   205ac:	f800283a 	ret

000205b0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   205b0:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   205b4:	00c00044 	movi	r3,1
   205b8:	1946983a 	sll	r3,r3,r5
   205bc:	1884703a 	and	r2,r3,r2
}
   205c0:	1004c03a 	cmpne	r2,r2,zero
   205c4:	f800283a 	ret

000205c8 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   205c8:	28c00808 	cmpgei	r3,r5,32
   205cc:	1800161e 	bne	r3,zero,20628 <alt_iic_isr_register+0x60>
{
   205d0:	defffe04 	addi	sp,sp,-8
   205d4:	dfc00115 	stw	ra,4(sp)
   205d8:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
   205dc:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   205e0:	00bfff84 	movi	r2,-2
   205e4:	8084703a 	and	r2,r16,r2
   205e8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   205ec:	280690fa 	slli	r3,r5,3
   205f0:	008000b4 	movhi	r2,2
   205f4:	1082c404 	addi	r2,r2,2832
   205f8:	10c5883a 	add	r2,r2,r3
   205fc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   20600:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   20604:	30000626 	beq	r6,zero,20620 <alt_iic_isr_register+0x58>
   20608:	00205400 	call	20540 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
   2060c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   20610:	dfc00117 	ldw	ra,4(sp)
   20614:	dc000017 	ldw	r16,0(sp)
   20618:	dec00204 	addi	sp,sp,8
   2061c:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   20620:	00205780 	call	20578 <alt_ic_irq_disable>
   20624:	003ff906 	br	2060c <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
   20628:	00bffa84 	movi	r2,-22
}
   2062c:	f800283a 	ret

00020630 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20630:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20634:	008000b4 	movhi	r2,2
   20638:	00c000b4 	movhi	r3,2
   2063c:	dfc00015 	stw	ra,0(sp)
   20640:	1081f004 	addi	r2,r2,1984
   20644:	18c25604 	addi	r3,r3,2392
   20648:	10c00326 	beq	r2,r3,20658 <alt_load+0x28>
  {
    while( to != end )
   2064c:	010000b4 	movhi	r4,2
   20650:	21025604 	addi	r4,r4,2392
   20654:	1100141e 	bne	r2,r4,206a8 <alt_load+0x78>
  if (to != from)
   20658:	008000b4 	movhi	r2,2
   2065c:	00c000b4 	movhi	r3,2
   20660:	10800804 	addi	r2,r2,32
   20664:	18c00804 	addi	r3,r3,32
   20668:	10c00326 	beq	r2,r3,20678 <alt_load+0x48>
    while( to != end )
   2066c:	010000b4 	movhi	r4,2
   20670:	21006204 	addi	r4,r4,392
   20674:	1100111e 	bne	r2,r4,206bc <alt_load+0x8c>
  if (to != from)
   20678:	008000b4 	movhi	r2,2
   2067c:	00c000b4 	movhi	r3,2
   20680:	1081f004 	addi	r2,r2,1984
   20684:	18c1f004 	addi	r3,r3,1984
   20688:	10c00326 	beq	r2,r3,20698 <alt_load+0x68>
    while( to != end )
   2068c:	010000b4 	movhi	r4,2
   20690:	2101f004 	addi	r4,r4,1984
   20694:	11000e1e 	bne	r2,r4,206d0 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20698:	00207340 	call	20734 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   2069c:	dfc00017 	ldw	ra,0(sp)
   206a0:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   206a4:	002074c1 	jmpi	2074c <alt_icache_flush_all>
    {
      *to++ = *from++;
   206a8:	19400017 	ldw	r5,0(r3)
   206ac:	10800104 	addi	r2,r2,4
   206b0:	18c00104 	addi	r3,r3,4
   206b4:	117fff15 	stw	r5,-4(r2)
   206b8:	003fe606 	br	20654 <alt_load+0x24>
   206bc:	19400017 	ldw	r5,0(r3)
   206c0:	10800104 	addi	r2,r2,4
   206c4:	18c00104 	addi	r3,r3,4
   206c8:	117fff15 	stw	r5,-4(r2)
   206cc:	003fe906 	br	20674 <alt_load+0x44>
   206d0:	19400017 	ldw	r5,0(r3)
   206d4:	10800104 	addi	r2,r2,4
   206d8:	18c00104 	addi	r3,r3,4
   206dc:	117fff15 	stw	r5,-4(r2)
   206e0:	003fec06 	br	20694 <alt_load+0x64>

000206e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   206e4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   206e8:	0009883a 	mov	r4,zero
{
   206ec:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   206f0:	00207100 	call	20710 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   206f4:	00207300 	call	20730 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   206f8:	d1a06c17 	ldw	r6,-32336(gp)
   206fc:	d1606d17 	ldw	r5,-32332(gp)
   20700:	d1206e17 	ldw	r4,-32328(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   20704:	dfc00017 	ldw	ra,0(sp)
   20708:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   2070c:	002032c1 	jmpi	2032c <main>

00020710 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20710:	deffff04 	addi	sp,sp,-4
   20714:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
   20718:	00207800 	call	20780 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2071c:	00800044 	movi	r2,1
   20720:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20724:	dfc00017 	ldw	ra,0(sp)
   20728:	dec00104 	addi	sp,sp,4
   2072c:	f800283a 	ret

00020730 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
   20730:	f800283a 	ret

00020734 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   20734:	0005883a 	mov	r2,zero
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   20738:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2073c:	10800804 	addi	r2,r2,32
   20740:	10c20018 	cmpnei	r3,r2,2048
   20744:	183ffc1e 	bne	r3,zero,20738 <alt_dcache_flush_all+0x4>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   20748:	f800283a 	ret

0002074c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2074c:	01440004 	movi	r5,4096
   20750:	0009883a 	mov	r4,zero
   20754:	00207881 	jmpi	20788 <alt_icache_flush>

00020758 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   20758:	213ffe84 	addi	r4,r4,-6
   2075c:	20800428 	cmpgeui	r2,r4,16
   20760:	1000051e 	bne	r2,zero,20778 <alt_exception_cause_generated_bad_addr+0x20>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   20764:	00800044 	movi	r2,1
   20768:	1104983a 	sll	r2,r2,r4
   2076c:	10a2c8cc 	andi	r2,r2,35619
   20770:	1004c03a 	cmpne	r2,r2,zero
   20774:	f800283a 	ret
  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;

  default:
    return 0;
   20778:	0005883a 	mov	r2,zero
  }
}
   2077c:	f800283a 	ret

00020780 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   20780:	000170fa 	wrctl	ienable,zero
}
   20784:	f800283a 	ret

00020788 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   20788:	28840070 	cmpltui	r2,r5,4097
   2078c:	1000011e 	bne	r2,zero,20794 <alt_icache_flush+0xc>
   20790:	01440004 	movi	r5,4096
   20794:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   20798:	2005883a 	mov	r2,r4
   2079c:	11400536 	bltu	r2,r5,207b4 <alt_icache_flush+0x2c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   207a0:	210007cc 	andi	r4,r4,31
   207a4:	20000126 	beq	r4,zero,207ac <alt_icache_flush+0x24>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   207a8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   207ac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   207b0:	f800283a 	ret
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   207b4:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   207b8:	10800804 	addi	r2,r2,32
   207bc:	003ff706 	br	2079c <alt_icache_flush+0x14>
