/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_timer_regs.h"
#include "altera_avalon_timer.h"
#include "sys/alt_irq.h"


/* global variables used to light LED when interrupt made */
int ledPattern[5][20] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0},
                         {1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0},
                         {1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0},
                         {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
int brightness, counter, direction;


/* function declaration */
void displayInt(int value);
void computePrime();
void initTimer();
void timer_ISR();


int main()
{
  // Variable Initialization
  brightness = 0; counter = 0;

  // Timer Initialization
  initTimer();

  /* Event loop never exits. */
  while (1) {
    computePrime();
  };

  return 0;
}


void initTimer() {
  // Timer Initialization
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
                                                 | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);    // Clear IRQ status just in case..
  IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, ALTERA_AVALON_TIMER_PERIODL_MSK);
  IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, ALTERA_AVALON_TIMER_PERIODH_MSK);

  // Register the ISR for timer event
  alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ, timer_ISR, 0, 0x0);

  // Start timer
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

void displayInt(uint32_t value) {
  // decode digit to 7-segment display value
  int digit[10] = {64,121,36,48,25,18,2,120,0,16};
  uint32_t val = value;
  int decodedInt[6];

  for (int i = 5; i >=0; i--) {
    decodedInt[i] = digit[val%10];
    val = val / 10;
  }

  IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, decodedInt[5]);
  IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, decodedInt[4]);
  IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, decodedInt[3]);
  IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, decodedInt[2]);
  IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, decodedInt[1]);
  IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, decodedInt[0]);
}

void timer_ISR() {
  if (ledPattern[brightness][counter]) {
    IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0x3FF);
  } else {
    IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0x0);
  }

  counter++;

  if (counter == 20) {
    counter = 0;
    
    // brightness pattern: 0-1-2-3-4-4-3-2-1-0
    if (direction) brightness++;
    else brightness--;

    if (brightness > 4) {
      direction = 0; brightness--;
    }
    if (brightness < 0) {
      direction = 1; brightness++;
    }
  }
}

void computePrime() {
  // initialize primeList
  uint32_t primeList[6542];
  primeList[0] = 2;
  primeList[1] = 3;

  uint32_t numPrime = 2;
  bool isPrime;

  int delay;
  for (uint32_t i = 5; i < 0xFFFFFFFF; i=i+2) {
      isPrime = true; // reset isPrime
    for (uint32_t j = 0; j < numPrime; j++) {
      if (i % primeList[j] == 0) { // if i is divisible by one of previous prime
        isPrime = false;           // i is not a prime number
        break;
      }
    }
  
    if (isPrime) {                 // if i was a prime
      if (numPrime < 6542) {
        numPrime++;                  // increment numPrime
        primeList[numPrime-1] = i;   // save to primeList
      }
      displayInt(i);               // display at 7 segment display
    }

    delay = 0;
    while(delay < 2000000) delay++;
  }
}
